
################################credits#########################################


#rTassel PCA/GWAS of rice metabolic products under Drought stress.
#Zachary Dickens
# based on Mohsin Ali code
#https://github.com/mohsinali1990/My_scripts/blob/main/LD%20decay%20Plot%20from%20TASSEL%20LDoutput.R#L1


#############If rJava/rTASSEL not accepting Allocated memory####################


remove.packages("rJava")
remove.packages("rTASSEL")

install.packages("rJava")
devtools::install_github(
  repo = "maize-genetics/rTASSEL",
  ref = "master",
  build_vignettes = TRUE,
  dependencies = TRUE
)


########################Allocate maximum memory to rTASSEL######################


#need to give java memory before rJava or rTASSEL are oppen!!!!!!!!!!!!!!!!!!!!!
options(java.parameters = c("-Xmx200g", "-Xms30g"))


library(rJava)
library(rTASSEL)

library(dplyr)
library(ggplot2)
library(magrittr)
library(tibble)
library(ggtree)


###########################General Input/Output data############################


##########Defining project##########

# Should be the only variables changed per project!
# except the trait name for the formula in the GWAS.

Project.name <-         "Rice_Project_2024"
Spieces.name <-         "Rice"
Output_name <-          "Testing2"
Chromosome <-           "4"
Treatment <-            "Experimental"
GWASTrait <-            "QTLi4"
Start <-                23911574
End <-                  24057287
maxHet <-               .15

# Setting up Input pathways and output pathways

EIO <-                  paste0("C:/Users/lczacktd/Desktop/Zachary_Dickens/Projects/Rice_Project_2024/Data/Genomic(SNP)_Data/47_imputed/Chr",Chromosome,"/HPM/")
rTASSEL_output <-       paste0("C:/Users/lczacktd/Desktop/Zachary_Dickens/Projects/Rice_Project_2024/code_output/rtassel_output/QTL_data_output/CHR",Chromosome,"/")
GWAS_output <-          paste0(rTASSEL_output)
PNG_GWAS_output <-      paste0(GWAS_output,"PNG/LD/")
CSV_GWAS_output <-      paste0(GWAS_output,"CSV/")

# Setting working directory for logging file
setwd(rTASSEL_output)

# Create logging file. #This should be run once at the beginning of the analysis
rTASSEL::startLogger(fullPath = NULL, fileName = Output_name)

###########The Pathway of Phenotype and Genomic(SNP)###########

# Name of Phenotype/Genomic/Design Data file
                                                       
GN2 <- "hmpALL.test.hmp.txt"

# Imputing Data
               
snp_file2 <- paste(EIO,GN2, sep="")

#################Load genotype and phenotype data into rTASSEL##################

geno2 <- rTASSEL::readGenotypeTableFromPath(path = snp_file2)

##################################LD############################################
geno_pheno_filtered <- rTASSEL::filterGenotypeTableSites(
  tasObj = geno2,
  siteMinCount = 150,
  siteMinAlleleFreq = 0.05,
  siteMaxAlleleFreq = 1.0,
  siteRangeFilterType = "none",
  maxHeterozygous = .1
)



# Filter genotype table by position
tasGenoPhenoFilt <- filterGenotypeTableSites(
  tasObj              = geno_pheno_filtered,
  siteRangeFilterType = "position",
  startPos            = Start,
  endPos              = End,
  startChr            = as.numeric(Chromosome),
  endChr              = as.numeric(Chromosome),
  maxHeterozygous     = maxHet
)

table_LD <- linkageDiseq(
  tasObj = tasGenoPhenoFilt,
  ldType = "All",
  windowSize = NULL,
  hetCalls = "ignore",
  verbose = TRUE
)

CSV_LD_output <- paste0(CSV_GWAS_output,"LD_Decay_zoom.csv")
write.csv(table_LD, CSV_LD_output, row.names = FALSE)

# import TASSEL LD output file
ld <- table_LD 
str(ld)

##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$`R^2` != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "NaN",]
ld_sub2$rsq <- ld_sub2$`R^2`

file <- ld_sub2[,c(1,2,7,8,15:19)]


# C values range from about 0.5 to 2, start with 0.1
Cstart <- c(C=0.1)

# fit a non linear model using the arbitrary C value, 
# N is the number of the genotypes that have the SNP site
modelC <- nls(rsq ~ ( (10+C*dist)/( (2+C*dist) * (11+C*dist) ) ) * 
                ( 1+( (3+C*dist) * (12+12*C*dist+(C*dist)^2) ) / ( 2*N*(2+C*dist) * (11+C*dist) ) ), 
              data=file, start=Cstart, control=nls.control(maxiter=100))

# extract rho, the recombination parameter in 4Nr
rho <- summary(modelC)$parameters[1]

# feed in the new value of rho to obtain LD values adjusted for their distances along the chromosome/genome
newrsq <- ( (10+rho*file$dist) / ( (2+rho*file$dist) * (11+rho*file$dist) ) ) *
  ( 1 + ( (3+rho * file$dist) * (12+12*rho*file$dist + (rho*file$dist)^2) ) / 
      (2*file$N*(2+rho*file$dist) * (11+rho*file$dist) ) )

newfile <- data.frame(file$dist, newrsq)

maxld <- max(newfile$newrsq,na.rm=TRUE) #using max LD value from adjusted data
halfdecay = maxld*0.5
halfdecaydist <- newfile$file.dist[which.min(abs(newfile$newrsq-halfdecay))]
newfile <- newfile[order(newfile$file.dist),]

y_intersection <- newfile$newrsq[which.min(abs(newfile$file.dist - halfdecaydist))]

setwd(PNG_GWAS_output)

# plotting the values
pdf(paste0(GWASTrait,"_LD_decay_zoom.pdf"), height=3.57, width = 3.57)
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 4, 0, 0)) 
plot(file$dist, file$rsq, pch=".", cex=2, xlab="Distance (bp)", ylab=expression(LD ~ (r^2)), col="grey")
lines(newfile$file.dist, newfile$newrsq, col="red", lwd=2)
abline(h=y_intersection, col="blue") # if you need to add horizental line
abline(v=halfdecaydist, col="green")
mtext(round(halfdecaydist,2), side=1, line=0.05, at=halfdecaydist, cex=0.75, col="green")
dev.off()

# Generate total QTLi LD
myLD <- ldPlot(
  tasObj  = tasGenoPhenoFilt,
  ldType  = "All",
  plotVal = "r2",
  verbose = FALSE
)

setwd(PNG_GWAS_output)
pdf(paste0("LD_QTLi_", Chromosome,"_",GWASTrait,"2.pdf"), width = 150, height = 75)
print(myLD)
dev.off()
ggsave(paste0("LD_QTLi_", Chromosome,"_",GWASTrait,"2.png"), plot = myLD, width = 150, height = 75,dpi = 100,limitsize = FALSE)
